<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CFD算法入门</title>
    <url>/Docs/Algorithm/CFD.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>CFD是一门研究使用计算机求解N-S方程以获得详细流场信息的学科。由计算机得到的流场信息可以被用于计算飞机的升阻力、力矩等我们感兴趣的量。想要掌握CFD算法、知道如何编写代码求解完整的N-S方程是困难的，因此我们往往在一知半解的情况下使用别人写的CFD软件进行计算。但是，想要熟练运用这些CFD软件，我们必须在一定程度上掌握CFD算法。因此，即便您目前只需要用现有的CFD软件进行计算，您也有必要了解一些CFD算法。</p>
<h2 id="理论学习">理论学习</h2>
<div class="tabs" id="theory"><ul class="nav-tabs"><li class="tab active"><a href="#theory-1">入门 →</a></li><li class="tab"><a href="#theory-2">进阶 →</a></li></ul><div class="tab-content"><div class="tab-pane active" id="theory-1"><ul>
<li><p>如果你只学过基本的流体力学，根本不知道什么是CFD，那你可以阅读<a href="https://libgen.li/edition.php?id=136599229">Computational Fluid Dynamics: the basics with applications; John Anderson</a>。如果你只想了解“什么是CFD”，那就阅读这本书的第一章。</p></li>
<li><p>CFD事实上就是将偏微分方程离散化，让计算机求解；只不过CFD离散的是十分复杂的N-S方程，需要用到复杂的数值方法，因此新手可能很难直接看懂CFD使用的算法。但不用着急，你可以先看看这本书<a href="https://libgen.li/edition.php?id=137216064">Numerical Solution of Partial Differential Equations An Introduction; K.W.Morton</a>，它将告诉你一些简单的偏微分方程的数值解法，而这些方法和N-S方程的数值解法本质非常相似。</p></li>
</ul></div><div class="tab-pane" id="theory-2"><ul>
<li>阅读<a href="https://libgen.li/edition.php?id=135800074">Computational Fluid Dynamics: Principles and Applications; Jiri Blazek</a>，了解目前主流软件中使用的CFD算法。这本书还附带了网格生成、N-S方程求解的教学软件，可以在<a href="https://booksite.elsevier.com/9780080999951/examplecodes.php">这里</a>找到。</li>
<li>如果你想了解Aerolaber们喜欢用的代码的算法，你可以阅读<a href="https://cloud.tsinghua.edu.cn/f/6a38dabb6c6a4d96aa0e/?dl=1">CFL3D User's Manual</a>。</li>
</ul></div></div></div>
<h2 id="动手实践">动手实践</h2>
<ul>
<li><p>Aerolab的李浩然在本科阶段自学CFD时主要参考了下面这个网站（使用<code>python</code>）： https://lorenabarba.com/blog/cfd-python-12-steps-to-navier-stokes/</p></li>
<li><p>选任玉新老师的《计算流体力学基础》课，并认真完成作业。</p></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>文档</title>
    <url>/Docs/index.html</url>
    <content><![CDATA[<p>Aerolab成员撰写帮助文档都被放在这个页面下。希望这些文档能够帮助你搞明白你想了解的问题。使用快捷键<code>Ctrl+F</code>在页面中搜索你想了解的内容的关键字。</p>
]]></content>
  </entry>
  <entry>
    <title>离散伴随算法介绍</title>
    <url>/Docs/Algorithm/DA.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>离散伴随方法被广泛用于空气动力学优化。它是一种求复杂复合函数<span class="math inline">\(f(x,w(x))\)</span>的对<span class="math inline">\(x\)</span>的梯度<span class="math inline">\(\nabla_x f\)</span>的算法。它的一大特点是，<strong>求梯度的计算量和设计变量<span class="math inline">\(x\)</span>的维数无关，只与中间变量<span class="math inline">\(w(x)\)</span>的维数有关</strong>。因此，它可以用于求设计变量非常多的目标函数的梯度——例如，由几十上百个参数定义的机翼的升力。离散伴随算法较为复杂，涉及到到隐函数定理、自动求导以及线性方程组求解三个方面。</p>
<h2 id="理论学习">理论学习</h2>
<div class="tabs" id="da-theory"><ul class="nav-tabs"><li class="tab active"><a href="#da-theory-1">入门 →</a></li><li class="tab"><a href="#da-theory-2">进阶 →</a></li></ul><div class="tab-content"><div class="tab-pane active" id="da-theory-1"><p>在对离散伴随方法一无所知的情况下，你可以阅读以下两篇文献。</p>
<ul>
<li><p><a href="https://cloud.tsinghua.edu.cn/f/b63866ca41664df6a8ee/?dl=1">An Introduction to Gradient Computation by the Discrete Adjoint Method; Austen C. Duffy</a>（建议有一定偏微分方程数值解基础的同学阅读，看完后会对离散伴随有很深入的理解）</p></li>
<li><p><a href="https://cloud.tsinghua.edu.cn/f/1d001c5f5dc04d58be17/?dl=1">PDE-constrained optimization and the adjoint method; Andrew M. Bradley et al.</a> （只要你会微积分就能读懂）</p></li>
</ul></div><div class="tab-pane" id="da-theory-2"><p>如果你已经使用过带有离散伴随算法的CFD求解器来求解气动优化问题，想要进一步了解使用程序实现离散伴随方法的理论基础，可以阅读Aerolab成员编写的报告： <a href="https://cloud.tsinghua.edu.cn/f/f5f6f05283464b9699da/?dl=1">An Introduction to DA</a></p></div></div></div>
<h2 id="相关软件">相关软件</h2>
<p>目前实验室主要使用两款带离散伴随方法的CFD求解器：<a href="https://dafoam.github.io/">DAFoam</a>和<a href="https://mdolab-adflow.readthedocs-hosted.com/en/latest/index.html">ADFlow</a>；此外Aerolab成员还自行编写了一款带伴随方法的二维线性对流扩散方程求解器：<a href="https://github.com/chairmanmao256/ALDESIA">ALDESIA</a>。 <div class="tabs" id="da-software"><ul class="nav-tabs"><li class="tab active"><a href="#da-software-1">DAFoam</a></li><li class="tab"><a href="#da-software-2">ADFlow</a></li><li class="tab"><a href="#da-software-3">ALDESIA</a></li></ul><div class="tab-content"><div class="tab-pane active" id="da-software-1"><p><a href="https://dafoam.github.io/">DAFoam</a>是一款基于OpenFOAM（一个用<code>C++</code>编写的、求解各种偏微分方程的代码库）的CFD+离散伴随求解器。其最大的优势是，用户能够使用<code>C++</code>语言、以“面向对象”的编程模式方便且快速地自定义求解器（及其伴随求解器）、目标函数等。但是由于DAFoam直接使用OpenFOAM的基于SIMPLE算法的CFD求解器，因此CFD求解质量、速度一般，且不能计算超声速流动。Aerolab的Wcy同学目前正在使用DAFoam研究拓扑优化。</p></div><div class="tab-pane" id="da-software-2"><p><a href="https://mdolab-adflow.readthedocs-hosted.com/en/latest/index.html">ADFlow</a>使用<code>Fortran</code>编写，使用“黎曼求解器”类的算法+结构网格求解CFD。Aerolab的Ycy，Yp和Xy同学使用ADFlow。</p></div><div class="tab-pane" id="da-software-3"><p><a href="https://github.com/chairmanmao256/ALDESIA">ALDESIA</a>是带伴随算法的线性对流扩散方程求解器，且只支持矩形边界的方网格。它求解的问题非常简单，但是使用<code>C++</code>语言、以面向对象的模式编写，因而具有较好的扩展性；另外，其简单的代码结构也非常适合刚刚入门CFD、离散伴随的同学学习CFD算法、离散伴随方法的程序实现。总的来说，ALDESIA主要承担教学任务而非科研任务。</p></div></div></div></p>
]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>使用CFD++</title>
    <url>/Docs/Software/CFDpp.html</url>
    <content><![CDATA[<h2 id="cfd基本操作">CFD++基本操作</h2>
<p>本节教程为视频教程，由冯良韬录制。片中用到的网格可以用PointWise生成，也可以用ICEM生成。</p>
<div class="tabs" id="fengtutorial"><ul class="nav-tabs"><li class="tab active"><a href="#fengtutorial-1">Episode 1</a></li><li class="tab"><a href="#fengtutorial-2">Episode 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fengtutorial-1"><p><a href="https://www.bilibili.com/video/BV1dt4y1e7ep?spm_id_from=333.999.0.0">使用CFD++计算翼型周围流场</a>：介绍方程组的选择；初始条件和边界条件设置；输出设置；时间推进设置等。</p></div><div class="tab-pane" id="fengtutorial-2"><p><a href="https://www.bilibili.com/video/BV11v411r713?spm_id_from=333.999.0.0">导出翼型的升阻力数据</a>：介绍如何在CFD++中定义要输出的升力系数、阻力系数和力矩系数；如何在计算结束后读取这些系数。</p></div></div></div>
]]></content>
  </entry>
  <entry>
    <title>安装与使用ALDESIA</title>
    <url>/Docs/Software/ALDESIA.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>ALDESIA是实验室自编的一款带伴随的二维线性对流扩散方程求解器。ALDESIA是使用<code>C++</code>编写的，它具有很强的面向对象特性，易于扩展，因而适合CFD和伴随算法的初学者阅读代码、修改代码。作者已经为ALDESIA添加了<code>Cython</code>文件和<code>setup.py</code>文件，因而ALDESIA可以被容易地被<code>python</code>打包，变成一个可以被<code>import</code>到<code>python</code>代码中的库。</p>
<h2 id="下载与安装windowswsl">下载与安装(Windows+WSL)</h2>
<div class="note warning"><ul>
<li><p>在下载和安装之前，确保你在WSL上的Ubuntu里安装了<code>g++</code>编译工具。输入下面的命令检查<code>g++</code>工具是否正确安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ --version</span><br></pre></td></tr></table></figure>
<p>如果没有返回版本信息，那么你需要安装<code>g++</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure>
<p>再次输入<code>g++ --version</code>查看是否返回版本信息，说返回，则说明安装成功。</p></li>
<li><p>安装之前，你还需要配置好<code>python</code>环境。关于<code>python</code>环境的配置，可以参考<a href="https://ostechnix.com/how-to-install-miniconda-in-linux/">How To Install Miniconda In Linux - OSTechNix</a>，也可以直接参考官方网站：<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html">Installing on Linux — conda 4.11.0.post48+b31c5ab10 documentation</a>。</p></li>
<li><p>你还需要安装<code>uzip</code>。首先检查是否安装了<code>unzip</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -v</span><br></pre></td></tr></table></figure>
<p>如果没有成功输出版本信息，就运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unzip</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -v</span><br></pre></td></tr></table></figure>
<p>如果输出版本信息，则表示<code>unzip</code>安装成功。</p></li>
</ul>
</div>
<div class="tabs" id="installation"><ul class="nav-tabs"><li class="tab active"><a href="#installation-1">Step 1</a></li><li class="tab"><a href="#installation-2">Step 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="installation-1"><p>打开WSL上的Ubuntu终端，跳转到你希望保存ALDESIA代码的目录（作为演示，我将把ALDESIA代码保存到<code>~/coding</code>目录下）。然后输入下面的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/chairmanmao256/ALDESIA/archive/r1.zip &amp;&amp; \</span><br><span class="line">unzip r1.zip &amp;&amp; \</span><br><span class="line">cd ALDESIA-r1</span><br></pre></td></tr></table></figure>
<p>现在，你下载并解压了ALDESIA的所有代码，并已经跳转到了这些代码所在的目录。</p></div><div class="tab-pane" id="installation-2"><p>在ALDESIA代码所在的目录中，运行下面的命令以编译所有文件，生成供链接用的<code>.o</code>文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./Allmake.sh</span><br></pre></td></tr></table></figure>
<p>然后跳转到<code>Aldesia</code>目录，将ALDESIA打包为<code>python</code>扩展：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Aldesia &amp;&amp; \</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></div></div></div>
<h2 id="使用方法">使用方法</h2>
<p>运行ALDESIA需要你准备两个文件：</p>
<div class="tabs" id="run"><ul class="nav-tabs"><li class="tab active"><a href="#run-1">input.ini</a></li><li class="tab"><a href="#run-2">run.py</a></li></ul><div class="tab-content"><div class="tab-pane active" id="run-1"><p>这个文件用来初始化ALDESIA对象，告诉ALDESIA想要它求解的问题的定义。</p></div><div class="tab-pane" id="run-2"><p>是你和ALDESIA的“交互界面”，用于生成ALDESIA对象，调用ALDESIA的方法以解决问题。</p></div></div></div>
<p>这两个文件的示例可以在示例目录<code>/ALDESIA-r1/Examples</code>下找到。示例目录下有两个示例，分别演示了ALDESIA求解线性对流扩散问题、线性对流扩散的伴随的功能。</p>
<h2 id="你可以做的开发">你可以做的开发</h2>
<p>目前，ALDESIA还不算完善：它只能求解正问题及其伴随，得到偏微分方程的解、目标函数的梯度；而且，ALDESIA使用十分原始的SOR方法求解线性方程组。因此，你还可以做：</p>
<ul>
<li>完成ALDESIA和优化求解器工具包<a href="https://github.com/mdolab/pyoptsparse">mdolab/pyoptsparse</a>的接口，使得我们可以利用ALDESIA提供的目标函数值、梯度来求解优化问题。</li>
<li>使用GMRES方法求解ALDESIA中的线性方程组。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>软件使用</title>
    <url>/Docs/Software/index.html</url>
    <content><![CDATA[<p>学会使用软件是在Aerolab做科研的重要一步。当然，它也是十分困难的一步。本页面包含Aerolab各个软件的专家级用户编辑的软件使用指南，覆盖的软件包含ICEM，CFD++，CFL3D等。希望专家级用户们的教学能增进你对这些软件的熟练程度！</p>
]]></content>
  </entry>
  <entry>
    <title>算法介绍</title>
    <url>/Docs/Algorithm/index.html</url>
    <content><![CDATA[<p>本页面介绍Aerolab成员们进行研究的过程中使用的一部分重要算法，包括CFD（计算流体力学）基础、离散伴随基础等。 由于这些算法都很复杂，我们在相应页面介绍算法时只会简单地叙述它的用途、特点。为了让读者进一步了解算法，我们会在每个算法的介绍页面附上一些参考文献或者相关网页链接。几乎所有的专著类参考文献都可以在https://libgen.li/index.php （Library Genesis）找到（但是需要科学上网才能访问）。</p>
]]></content>
  </entry>
  <entry>
    <title>使用ICEM画网格</title>
    <url>/Docs/Software/ICEM.html</url>
    <content><![CDATA[<h2 id="视频教学">视频教学</h2>
<p>将由Aerolab网格专家录制，敬请期待！</p>
]]></content>
  </entry>
</search>
