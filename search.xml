<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>文档</title>
    <url>/Docs/index.html</url>
    <content><![CDATA[<p>Aerolab成员撰写帮助文档都被放在这个页面下。希望这些文档能够帮助你搞明白你想了解的问题。使用快捷键<code>Ctrl+F</code>在页面中搜索你想了解的内容的关键字。</p>
]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>离散伴随算法介绍</title>
    <url>/Docs/Algorithm/DA.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>离散伴随方法被广泛用于空气动力学优化。它是一种求复杂复合函数<span class="math inline">\(f(x,w(x))\)</span>的对<span class="math inline">\(x\)</span>的梯度<span class="math inline">\(\nabla_x f\)</span>的算法。它的一大特点是，<strong>求梯度的计算量和设计变量<span class="math inline">\(x\)</span>的维数无关，只与中间变量<span class="math inline">\(w(x)\)</span>的维数有关</strong>。因此，它可以用于求设计变量非常多的目标函数的梯度——例如，由几十上百个参数定义的机翼的升力。离散伴随算法较为复杂，涉及到到隐函数定理、自动求导以及线性方程组求解三个方面。</p>
<h2 id="理论学习">理论学习</h2>
<div class="tabs" id="da-theory"><ul class="nav-tabs"><li class="tab active"><a href="#da-theory-1">入门 →</a></li><li class="tab"><a href="#da-theory-2">进阶 →</a></li></ul><div class="tab-content"><div class="tab-pane active" id="da-theory-1"><p>在对离散伴随方法一无所知的情况下，你可以阅读以下两篇文献。</p>
<ul>
<li><p><a href="https://cloud.tsinghua.edu.cn/f/b63866ca41664df6a8ee/?dl=1">An Introduction to Gradient Computation by the Discrete Adjoint Method; Austen C. Duffy</a>（建议有一定偏微分方程数值解基础的同学阅读，看完后会对离散伴随有很深入的理解）</p></li>
<li><p><a href="https://cloud.tsinghua.edu.cn/f/1d001c5f5dc04d58be17/?dl=1">PDE-constrained optimization and the adjoint method; Andrew M. Bradley et al.</a> （只要你会微积分就能读懂）</p></li>
</ul></div><div class="tab-pane" id="da-theory-2"><p>如果你已经使用过带有离散伴随算法的CFD求解器来求解气动优化问题，想要进一步了解使用程序实现离散伴随方法的理论基础，可以阅读Aerolab成员编写的报告： <a href="https://cloud.tsinghua.edu.cn/f/f5f6f05283464b9699da/?dl=1">An Introduction to DA</a></p></div></div></div>
<h2 id="相关软件">相关软件</h2>
<p>目前实验室主要使用两款带离散伴随方法的CFD求解器：<a href="https://dafoam.github.io/">DAFoam</a>和<a href="https://mdolab-adflow.readthedocs-hosted.com/en/latest/index.html">ADFlow</a>；此外Aerolab成员还自行编写了一款带伴随方法的二维线性对流扩散方程求解器：<a href="https://github.com/chairmanmao256/ALDESIA">ALDESIA</a>。 <div class="tabs" id="da-software"><ul class="nav-tabs"><li class="tab active"><a href="#da-software-1">DAFoam</a></li><li class="tab"><a href="#da-software-2">ADFlow</a></li><li class="tab"><a href="#da-software-3">ALDESIA</a></li></ul><div class="tab-content"><div class="tab-pane active" id="da-software-1"><p><a href="https://dafoam.github.io/">DAFoam</a>是一款基于OpenFOAM（一个用<code>C++</code>编写的、求解各种偏微分方程的代码库）的CFD+离散伴随求解器。其最大的优势是，用户能够使用<code>C++</code>语言、以“面向对象”的编程模式方便且快速地自定义求解器（及其伴随求解器）、目标函数等。但是由于DAFoam直接使用OpenFOAM的基于SIMPLE算法的CFD求解器，因此CFD求解质量、速度一般，且不能计算超声速流动。Aerolab的Wcy同学目前正在使用DAFoam研究拓扑优化。</p></div><div class="tab-pane" id="da-software-2"><p><a href="https://mdolab-adflow.readthedocs-hosted.com/en/latest/index.html">ADFlow</a>使用<code>Fortran</code>编写，使用“黎曼求解器”类的算法+结构网格求解CFD。Aerolab的Ycy，Yp和Xy同学使用ADFlow。</p></div><div class="tab-pane" id="da-software-3"><p><a href="https://github.com/chairmanmao256/ALDESIA">ALDESIA</a>是带伴随算法的线性对流扩散方程求解器，且只支持矩形边界的方网格。它求解的问题非常简单，但是使用<code>C++</code>语言、以面向对象的模式编写，因而具有较好的扩展性；另外，其简单的代码结构也非常适合刚刚入门CFD、离散伴随的同学学习CFD算法、离散伴随方法的程序实现。总的来说，ALDESIA主要承担教学任务而非科研任务。</p></div></div></div></p>
]]></content>
  </entry>
  <entry>
    <title>CFD算法入门</title>
    <url>/Docs/Algorithm/CFD.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>CFD是一门研究使用计算机求解N-S方程以获得详细流场信息的学科。由计算机得到的流场信息可以被用于计算飞机的升阻力、力矩等我们感兴趣的量。想要掌握CFD算法、知道如何编写代码求解完整的N-S方程是困难的，因此我们往往在一知半解的情况下使用别人写的CFD软件进行计算。但是，想要熟练运用这些CFD软件，我们必须在一定程度上掌握CFD算法。因此，即便您目前只需要用现有的CFD软件进行计算，您也有必要了解一些CFD算法。</p>
<h2 id="理论学习">理论学习</h2>
<div class="tabs" id="theory"><ul class="nav-tabs"><li class="tab active"><a href="#theory-1">入门 →</a></li><li class="tab"><a href="#theory-2">进阶 →</a></li></ul><div class="tab-content"><div class="tab-pane active" id="theory-1"><ul>
<li><p>如果你只学过基本的流体力学，根本不知道什么是CFD，那你可以阅读<a href="https://libgen.li/edition.php?id=136599229">Computational Fluid Dynamics: the basics with applications; John Anderson</a>。如果你只想了解“什么是CFD”，那就阅读这本书的第一章。</p></li>
<li><p>CFD事实上就是将偏微分方程离散化，让计算机求解；只不过CFD离散的是十分复杂的N-S方程，需要用到复杂的数值方法，因此新手可能很难直接看懂CFD使用的算法。但不用着急，你可以先看看这本书<a href="https://libgen.li/edition.php?id=137216064">Numerical Solution of Partial Differential Equations An Introduction; K.W.Morton</a>，它将告诉你一些简单的偏微分方程的数值解法，而这些方法和N-S方程的数值解法本质非常相似。</p></li>
</ul></div><div class="tab-pane" id="theory-2"><ul>
<li>阅读<a href="https://libgen.li/edition.php?id=135800074">Computational Fluid Dynamics: Principles and Applications; Jiri Blazek</a>，了解目前主流软件中使用的CFD算法。这本书还附带了网格生成、N-S方程求解的教学软件，可以在<a href="https://booksite.elsevier.com/9780080999951/examplecodes.php">这里</a>找到。</li>
<li>如果你想了解Aerolaber们喜欢用的代码的算法，你可以阅读<a href="https://cloud.tsinghua.edu.cn/f/6a38dabb6c6a4d96aa0e/?dl=1">CFL3D User's Manual</a>。</li>
</ul></div></div></div>
<h2 id="动手实践">动手实践</h2>
<ul>
<li><p>Aerolab的李浩然在本科阶段自学CFD时主要参考了下面这个网站（使用<code>python</code>）： https://lorenabarba.com/blog/cfd-python-12-steps-to-navier-stokes/</p></li>
<li><p>选任玉新老师的《计算流体力学基础》课，并认真完成作业。</p></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>算法介绍</title>
    <url>/Docs/Algorithm/index.html</url>
    <content><![CDATA[<p>本页面介绍Aerolab成员们进行研究的过程中使用的一部分重要算法，包括CFD（计算流体力学）基础、离散伴随基础等。 由于这些算法都很复杂，我们在相应页面介绍算法时只会简单地叙述它的用途、特点。为了让读者进一步了解算法，我们会在每个算法的介绍页面附上一些参考文献或者相关网页链接。几乎所有的专著类参考文献都可以在https://libgen.li/index.php （Library Genesis）找到（但是需要科学上网才能访问）。</p>
]]></content>
  </entry>
  <entry>
    <title>缺失的一节课</title>
    <url>/Docs/Coding/AMissingSemester.html</url>
    <content><![CDATA[<p><a href="https://missing-semester-cn.github.io/">这是一位计算机系老哥推荐的、来自MIT的课程</a>。课程简介里写道： <blockquote class="blockquote-center">
<p>作为计算机科学家，我们都知道计算机最擅长帮助我们完成重复性的工作。 但是我们却常常忘记这一点也适用于我们使用计算机的方式，而不仅仅是利用计算机程序去帮我们求解问题。 在从事与计算机相关的工作时，我们有很多触手可及的工具可以帮助我们更高效的解决问题。 但是我们中的大多数人实际上只利用了这些工具中的很少一部分，我们常常只是死记硬背一些如咒语般的命令， 或是当我们卡住的时候，盲目地从网上复制粘贴一些命令。</p>
<p>本课程意在帮你解决这一问题。</p>

</blockquote> 这门课程介绍了<code>shell</code>、<code>git</code>和<code>vim</code>等等我们在科研过程中常用的工具的使用方法。另外还简要介绍了<code>markdown</code>——一种写文档的高效语言，你正在读的这个网页就是用<code>markdown</code>写的。一些常用的计算机术语（例如“API”）也会被介绍。每节课的长度在1小时左右，因此你可以每天听一节，十几天后你就都会了。</p>
]]></content>
  </entry>
  <entry>
    <title>使用Cython封装C++编写的Python扩展</title>
    <url>/Docs/Coding/Cython.html</url>
    <content><![CDATA[<h2 id="cython简介">Cython简介</h2>
<h3 id="cython是什么">Cython是什么？</h3>
<p>“Cython”一词与两件东西密切相关：</p>
<p>（1）<em>Cython</em> 是一种将C，C++静态数据类型(static type)与Python语言混合的编程语言。这意味着<em>Cython</em>编程可以使用Python语法，又可以使用C，C++中的静态数据类型。 （2） <code>cython</code>是将Cython编写的源代码编译为高效的C，C++代码的编译器。</p>
<p>首先介绍(1) Cython语言。下面是一段使用纯Python语言编写的，计算斐波那契数列第<span class="math inline">\(n\)</span>个元素的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">	a, b = <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">		a, b = a + b, a</span><br><span class="line">	<span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>
<p>事实上，任何纯Python代码都是合格的Cython代码，上述代码也不例外。但是，正如(1)所说，Cython语言的特点还包括<strong>可以使用C，C++中的静态数据类型</strong>。下面我们来看一段更加”Cython“的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fib(int n):</span><br><span class="line">	cdef int i                  #C static type</span><br><span class="line">	cdef double a=0.0, b=1.0	#C static type</span><br><span class="line">	for i in range(n):</span><br><span class="line">		a, b = a + b, a</span><br><span class="line">	return a</span><br></pre></td></tr></table></figure>
<p>上述Cython代码与纯Python代码的区别在于将所有的变量通过<code>cdef</code>语句声明成了C，C++静态数据类型。</p>
<p>下面我们来看看(2)<code>cython</code>编译器。将上述求斐波那契数列第<span class="math inline">\(n\)</span>个元素的代码保存为<code>fib.pyx</code>，然后编写如下脚本，并将其保存为<code>setup.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;Fib app&#x27;</span>,</span><br><span class="line">    ext_modules=cythonize(<span class="string">&quot;fib.pyx&quot;</span>),</span><br><span class="line">    zip_safe=<span class="literal">False</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>再在终端输入<code>python setup.py build_ext --inplace</code>（注意，要保证当前激活的虚拟环境内安装有Cython）。该命令会将函数<code>fib</code>就地安装。安装完成后可在同一目录下找到<code>cython</code>编译产生的<code>fib.c</code>文件。</p>
<p>然后我们可以在当地打开python交互界面，输入以下指令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib.fib(<span class="number">6</span>)</span><br><span class="line"><span class="number">8.0</span></span><br></pre></td></tr></table></figure>
<p>可见，<code>fib.pyx</code>被成功安装。</p>
<h3 id="cython可以用来做什么">Cython可以用来做什么？</h3>
<p>对于上述求斐波那契数列的函数，我们比较纯Python脚本和编译后的、使用了静态数据类型的Cython程序的计算速度可以发现，<strong>后者的计算速度比前者快了50倍</strong>。因此Cython的一大应用是：</p>
<ul>
<li><strong>使用静态数据类型，并将Python脚本编译为C代码，提高对应的纯Python代码的计算速度。</strong></li>
</ul>
<p>在这个应用中，我们把Python变成了C，从而提高了计算效率。事实上，Cython还有”相反“的应用：</p>
<ul>
<li><strong>使用Cython将C函数或C++类封装成Python的扩展，供Python代码调用。</strong></li>
</ul>
<p>这样，我们可以利用更易读、易更改的Python代码使用复杂的C，C++代码（为C，C++代码做了一个Python外壳），并且仍然保有C，C++计算的高效性。下面，我们以Cython打包一维Euler方程的C++代码为例，简要介绍Cython打包方法。</p>
<p><em>更多关于Cython的资料</em>：</p>
<p><em>Cython: A Guide for Python Programmers, Kurt W.Smith</em></p>
<p><a href="https://cython.readthedocs.io/en/latest/index.html">Welcome to Cython’s Documentation — Cython 3.0.0a9 documentation</a></p>
<h2 id="使用cython打包c类---以一维euler方程求解程序为例">使用Cython打包C++类---以一维Euler方程求解程序为例</h2>
<p>该示例中的所有代码可以在<a href="https://github.com/chairmanmao256/pyEuler1D">这里</a>下载。这套代码在Windows的带有Cython的Conda环境下即可编译。</p>
<h3 id="c类euler1d">C++类：Euler1D</h3>
<p>我使用C++实现了求解一维Euler方程的算法，并将它封装成了一个类<code>Euler1D</code>。我们通过<code>Euler1D.h</code>头文件来看看这个类都包含什么属性和方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> EULER1D_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EULER1D_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Euler1D</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">     std::string boundary_type;</span><br><span class="line">     <span class="type">int</span> ncells; <span class="comment">// The number of cellls. The virtual cells are not included.</span></span><br><span class="line">     <span class="type">double</span>** sol = <span class="keyword">new</span> <span class="type">double</span>* [<span class="number">3</span>];      <span class="comment">// cell-center solution vector.         </span></span><br><span class="line">     <span class="type">double</span>** sol_old = <span class="keyword">new</span> <span class="type">double</span>* [<span class="number">3</span>];  <span class="comment">// cell-center value at the last step   </span></span><br><span class="line">     <span class="type">double</span>** rec_l = <span class="keyword">new</span> <span class="type">double</span>* [<span class="number">3</span>];    <span class="comment">// reconstructed left value at interfaces.   </span></span><br><span class="line">     <span class="type">double</span>** rec_r = <span class="keyword">new</span> <span class="type">double</span>* [<span class="number">3</span>];    <span class="comment">// reconstructed right value at interfaces. </span></span><br><span class="line">     <span class="type">double</span>** flux = <span class="keyword">new</span> <span class="type">double</span>* [<span class="number">3</span>];     <span class="comment">// fluxes at interfaces.                 </span></span><br><span class="line">     <span class="type">double</span>** avg = <span class="keyword">new</span> <span class="type">double</span>* [<span class="number">3</span>];      <span class="comment">// Averaged primitive variables</span></span><br><span class="line">     <span class="type">double</span>* mesh;   <span class="comment">// The x mesh of the solution.</span></span><br><span class="line">     <span class="type">double</span> vL[<span class="number">3</span>][<span class="number">1</span>], vLL[<span class="number">3</span>][<span class="number">1</span>], vR[<span class="number">3</span>][<span class="number">1</span>], vRR[<span class="number">3</span>][<span class="number">1</span>]; <span class="comment">// Virtual cells</span></span><br><span class="line">     <span class="function"><span class="type">double</span>* <span class="title">get_eig</span><span class="params">(<span class="type">double</span> u, <span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         ...</span><br><span class="line">          <span class="comment">//Return the eigen values of the Jacobian</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">prim2con</span><span class="params">(<span class="type">int</span> flag)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         ...</span><br><span class="line">          <span class="comment">//Convert primitive variables to conserved variables</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">con2prim</span><span class="params">(<span class="type">int</span> flag)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         ...</span><br><span class="line">          <span class="comment">//Convert conserved variables to primitive variables</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="type">double</span> <span class="title">minmod</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         ...</span><br><span class="line">          <span class="comment">//minmod function for reconstruction</span></span><br><span class="line">     &#125; </span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">setold</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         ...</span><br><span class="line">          <span class="comment">//store the solution at the last time step</span></span><br><span class="line">     &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Euler1D</span>(std::string &amp; bctype, <span class="type">int</span> n = <span class="number">100</span>); <span class="comment">//Constructor.</span></span><br><span class="line">    ~<span class="built_in">Euler1D</span>();                   <span class="comment">//Destructor</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">()</span></span>;            <span class="comment">//Set initial condition</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_boundary</span><span class="params">()</span></span>;          <span class="comment">//Set boundary condition</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reconstruction_0</span><span class="params">()</span></span>;      <span class="comment">//Zero-th order reconstruction</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reconstruction_TVD</span><span class="params">()</span></span>;    <span class="comment">//Second order TVD reconstruction</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">avg_roe</span><span class="params">()</span></span>;               <span class="comment">//Calculate Roe&#x27;s average at interfaces</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cal_roe_flux</span><span class="params">()</span></span>;          <span class="comment">//Calculate Roe&#x27;s flux at interfaces</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writefile</span><span class="params">(<span class="type">const</span> std::string &amp; filename)</span></span>;  <span class="comment">//Store the outcome</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">timeadvancement</span><span class="params">(<span class="type">double</span> dt, <span class="type">int</span> oldset)</span></span>;   <span class="comment">//Explicit time advancement</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>可以看到，<code>Euler1D</code>类的属性有包括：记录边界条件类型的字符串；存储本时间步的解的数组和存储上一时间步的解的数组；存储重构得到的左右状态的数组；存储界面上的均值的数组；存储通量的数组。私有方法包括守恒变量和原始变量相互转换的函数；<span class="math inline">\(minmod\)</span>函数以及存储上一时间步的解的函数。</p>
<p>公有方法则包括：构造、析构函数；初始化函数；边界条件设置函数；零阶重构函数；TVD重构函数；Roe平均函数；Roe通量函数；用于将结果写成文件的函数；时间推进函数。</p>
<p>可见，<code>Euler1D</code>类中包含私有属性、私有函数和公有函数（包括自定义的构造函数和析构函数）。下面我们来展示如何使用Cython包装这个类。</p>
<h3 id="编写定义文件.pxd">编写定义文件.pxd</h3>
<p>Cython中<code>.pxd</code>文件的地位类似于C++中<code>.h</code>文件的地位。在<code>.pxd</code>文件里我们会给出类和类方法的定义，但不会给出其具体实现。本例中<code>Eulerdef.pxd</code>文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#cython:language level = 3</span><br><span class="line">cdef extern from &quot;Euler1D.cpp&quot;:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">from libcpp.string cimport string</span><br><span class="line"></span><br><span class="line">cdef extern from &quot;Euler1D.h&quot;:</span><br><span class="line">    cdef cppclass Euler1D:</span><br><span class="line">        Euler1D(string bctype, int n) except + </span><br><span class="line">        void initialize() except + </span><br><span class="line">        void set_boundary() except + </span><br><span class="line">        void reconstruction_0() except + </span><br><span class="line">        void reconstruction_TVD() except +</span><br><span class="line">        void avg_roe() except + </span><br><span class="line">        void cal_roe_flux() except +</span><br><span class="line">        void writefile(string filename) except +</span><br><span class="line">        void timeadvancement(double dt, int oldset) except +</span><br></pre></td></tr></table></figure>
<p>下面来说说其中需要注意的地方。</p>
<ul>
<li>使用<code>cppclass</code>关键字定义C++中自定义的类。</li>
<li>由于我们使用了C++中自带的<code>string</code>，所以需要有<code>from libcpp.x cimport x</code>语句。</li>
<li>通过<code>cdef extern from</code>在Cython中声明外部C文件已经声明的类、函数等。一般的语法为：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cdef extern from &quot;header_name&quot;</span><br><span class="line">	...</span><br><span class="line">    #indented declarations from header file</span><br></pre></td></tr></table></figure>
<p>上述<code>cdef extern from</code>语句块会使得<code>cython</code>编译得到的C文件中出现<code>#include "header_name"</code>。另外，语句块中定义的变量，函数等能为Cython代码的其他部分所用。在<code>.pxd</code>文件中，我们使用了两次<code>cdef extern from</code>语句块，第一次使用只是<code>include</code>了C实现文件<code>Euler1D.cpp</code>，第二次则<code>include</code>了头文件，并声明了<code>Euler1D</code>类中所有<strong>我们希望之后在Python外壳中调用的公有方法</strong>。要特别注意的是：</p>
<p>1）在这里我们<strong>不一定</strong>要声明类中所有的公有方法，只用声明我们需要的那些公有方法。</p>
<p>2）除了构造函数外，其他方法<strong>都要指明返回值类型</strong>，这和C++的语法相同。</p>
<p>3）声明公有方法时，不用像C++中那样加<code>Euler1D::</code>。</p>
<p>4）要指明函数参数的C类型，但不用使用<code>cdef</code>语句。</p>
<p>5）函数末尾加上<code>except +</code>语句，可以使得C++触发异常时将异常传递给Cython。</p>
<p>6）<strong>不能</strong>在<code>cdef extern from</code>语句块中声明私有属性、私有方法。这延续了C++“封装”的思想，保证了私有成员不会被Python外壳访问。</p>
<h3 id="编写实现文件.pyx">编写实现文件.pyx</h3>
<p>Cython中<code>.pyx</code>文件的地位类似于C++中<code>.cpp</code>文件的地位。在<code>.pyx</code>文件里我们实现<code>.pxd</code>文件中声明的类方法，正如C++在<code>.cpp</code>文件中实现<code>.h</code>文件声明的类方法一样。本例中<code>pyEuler1D.pyx</code>文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#distutils:language=c++</span><br><span class="line">#cython:language_level=3</span><br><span class="line"></span><br><span class="line">from Eulerdef cimport Euler1D as _Euler</span><br><span class="line">from libcpp.string cimport string</span><br><span class="line"></span><br><span class="line">cdef class Euler1D:</span><br><span class="line"></span><br><span class="line">    cdef _Euler* pEuler</span><br><span class="line"></span><br><span class="line">    def __cinit__(self):</span><br><span class="line">        self.pEuler = NULL</span><br><span class="line"></span><br><span class="line">    def __dealloc__(self):</span><br><span class="line">        print(&quot;__dealloc__is performed!&quot;)</span><br><span class="line">        if self.pEuler != NULL:</span><br><span class="line">            del self.pEuler</span><br><span class="line"></span><br><span class="line">    def __init__(self, string &amp; bc, int N):</span><br><span class="line">        self.pEuler = new _Euler(bc, N)</span><br><span class="line"></span><br><span class="line">    def initialize(self):</span><br><span class="line">        self.pEuler.initialize()</span><br><span class="line">    </span><br><span class="line">    def set_boundary(self):</span><br><span class="line">        self.pEuler.set_boundary()</span><br><span class="line"></span><br><span class="line">    def reconstruction_0(self):</span><br><span class="line">        self.pEuler.reconstruction_0()</span><br><span class="line"></span><br><span class="line">    def reconstruction_TVD(self):</span><br><span class="line">        self.pEuler.reconstruction_TVD()</span><br><span class="line"></span><br><span class="line">    def avg_roe(self):</span><br><span class="line">        self.pEuler.avg_roe()</span><br><span class="line"></span><br><span class="line">    def cal_roe_flux(self):</span><br><span class="line">        self.pEuler.cal_roe_flux()</span><br><span class="line"></span><br><span class="line">    def writefile(self, string &amp; filename):</span><br><span class="line">        self.pEuler.writefile(filename)</span><br><span class="line"></span><br><span class="line">    def timeadvancement(self,double dt, int oldset):</span><br><span class="line">        self.pEuler.timeadvancement(dt, oldset)</span><br></pre></td></tr></table></figure>
<p>下面来谈谈<code>.pyx</code>文件中需要注意的点：</p>
<ul>
<li>类似于C++的<code>.cpp</code>文件中<code># include "x.h"</code>将定义文件<code>x.h</code>包含，实现文件<code>.pyx</code>也要将<code>.pxd</code>定义文件包含进来。这是通过<code>from ... cimport ... as ...</code>实现的。</li>
<li>在声明中使用了C++字符串类，因此要<code>cimport</code>字符串类。</li>
<li>类函数实现的代码块和纯Python类实现代码块相似，但要在开头加上<code>cdef</code>。</li>
<li>要创建一个<code>Euler1D</code>（被<code>import</code>为了<code>_Euler</code>类）类的指针。在之后定义类方法时，我们使用这个指针访问<code>Euler1D</code>的各个方法。</li>
<li>纯Python类定义只有一个<code>__init__</code>构造函数，而此处的类定义除了<code>__init__</code>构造函数外，还要有一个<code>__cinit__</code>构造函数。<code>__cinit__</code>函数将C++类指针初始化为<code>NULL</code>，它的地位相当于C++中的默认构造 函数，只是在这里它需要被显式定义。在调用Python层级的构造函数<code>__init__</code>之前，<code>__cinit__</code>将被调用。</li>
<li>要定义<code>__dealloc__</code>函数执行C++层级的内存释放。这相当于C++中的析构函数。（注意，C++类<code>Euler1D</code>中本身定义过析构函数，但是我们并没有在<code>.pxd</code>中声明它，因此在<code>.pyx</code>文件中它是不可见的，所以我们还要<code>.pyx</code>文件中实现一个析构函数。我们之所以不在<code>.pxd</code>中声明C++代码定义好的析构函数，是因为我们不希望我们正在搭建的Python外壳有能力显式地调用析构函数。）注意这里我们使用<code>del</code>解除Python引用。引用解除后，C++层级的析构函数便被调用。</li>
<li>Python层级的<code>__init__</code>构造函数通过<code>new</code>给指向<code>Euler1D</code>类实例的指针<code>pEuler</code>分配内存，并调用C++代码中的构造函数初始化<code>pEuler</code>指向的实例。</li>
<li>其他公有方法都靠<strong><code>pEuler</code>指针调用C++中已经实现好的方法</strong>来实现。不要忘记各个方法参数中的<code>self</code>。</li>
</ul>
<h3 id="使用setuptools和cython编译并安装扩展">使用setuptools和Cython编译并安装扩展</h3>
<p>编写<code>setup.py</code>来编译并安装扩展。<code>setup.py</code>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;pyEuler1D app&#x27;</span>,</span><br><span class="line">    ext_modules=cythonize(<span class="string">&quot;pyEuler1D.pyx&quot;</span>,language_level=<span class="number">3</span>),</span><br><span class="line">    zip_safe=<span class="literal">False</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>目前，<strong>笔者还不太清楚<code>setuptools</code>的具体用法，只是知道在这里可以使用它进行编译、安装和打包等操作</strong>。需要了解<code>setuptools</code>，或是想要知道高级的打包、安装选项，可以访问<a href="http://setuptools.readthedocs.io/">这里</a>。注意此处将实现文件<code>pyEuler1D.pyx</code>作为要<code>cythonize</code>的对象。</p>
<p>现在，我们编写完了所有代码。将<code>Euler1D.h</code>, <code>Euler1D.cpp</code>, <code>Eulerdef.pxd</code>, <code>pyEuler1D.pyx</code>和<code>setup.py</code>放在一个目录下，并在该目录下打开<code>cmd</code>。笔者使用的Anaconda管理虚拟环境，因此笔者安装时，先激活装有<code>Cython</code>包的、笔者自定义的虚拟环境<code>Extentions</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">conda activate Extentions</span><br></pre></td></tr></table></figure>
<p>然后输入以下指令安装扩展：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>扩展将被安装到<code>../Anaconda/envs/Extentions/Lib/site-packages</code>目录下，扩展的名称为<code>pyEuler1D</code>。下面来检验<code>pyEuler1D</code>扩展是否安装成功。编写脚本<code>run.py</code>作为<code>pyEuler1D</code>扩展的“交互界面”：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyEuler1D</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="comment"># Solve 1-D Euler equation using the C++ code wrapped by Cython</span></span><br><span class="line"><span class="comment"># This is the user-interface of the solver written by python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################## User input ###########################</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1500</span>                                   <span class="comment"># The number of grid cells along x direction</span></span><br><span class="line">cfl = <span class="number">0.25</span>                                 <span class="comment"># CFL number. The time step is determined by: dt = CFL*dx</span></span><br><span class="line">t = <span class="number">0.1</span>                                    <span class="comment"># Time to terminate the time advancement (The equation is integrated to t)</span></span><br><span class="line">bctype = <span class="built_in">bytes</span>(<span class="string">&quot;Inf&quot;</span>,<span class="string">&quot;ascii&quot;</span>)              <span class="comment"># Boundary condition. Currently only the infinity condition (Inf) and periodic </span></span><br><span class="line">                                           <span class="comment"># condition (Periodic) are supported. Input otherwise would raise error.</span></span><br><span class="line">FILENAME = <span class="string">&quot;Output&quot;</span>                        <span class="comment"># The name of the ouput file</span></span><br><span class="line">file_num = <span class="number">100</span>                             <span class="comment"># The number of output files</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################## Solver setup #########################</span></span><br><span class="line"></span><br><span class="line">dx = <span class="number">1.0</span>/n</span><br><span class="line">dtt = cfl*dx</span><br><span class="line">step = math.floor(t/dtt)</span><br><span class="line">writestep = math.floor(step/file_num)</span><br><span class="line">pysolver = pyEuler1D.Euler1D(bctype, n)</span><br><span class="line">pysolver.initialize()</span><br><span class="line">pysolver.set_boundary()</span><br><span class="line"></span><br><span class="line"><span class="comment">######################### Solver run ##########################</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,step):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        pysolver.reconstruction_0()</span><br><span class="line">        pysolver.avg_roe()</span><br><span class="line">        pysolver.reconstruction_TVD()</span><br><span class="line">        pysolver.avg_roe()</span><br><span class="line">        pysolver.cal_roe_flux()</span><br><span class="line">        dt = dtt/(<span class="number">4</span>-j)</span><br><span class="line">        pysolver.timeadvancement(dt,<span class="number">1</span>-j)</span><br><span class="line">        pysolver.set_boundary()</span><br><span class="line"></span><br><span class="line">fnam = <span class="built_in">bytes</span>(FILENAME+<span class="string">&quot;.dat&quot;</span>,<span class="string">&quot;ascii&quot;</span>)           </span><br><span class="line">pysolver.writefile(fnam)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################### Post processing ########################</span></span><br><span class="line"><span class="comment">#read the outcome</span></span><br><span class="line">...<span class="comment">#Omitted here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#plot the outcome</span></span><br><span class="line">...<span class="comment">#Omitted here</span></span><br></pre></td></tr></table></figure>
<p>上述交互界面调用了<code>matplotlib</code>包来对计算结果进行后处理。为了简洁，后处理代码被隐去。交互界面中时间推进的部分采用Runge-Kutta四步时间推进。用户可以根据自己的需求修改时间推进方式。目前，初始条件在<code>Euler1D.cpp</code>中用C++代码直接给定，还不能接受用户的输入。因此要修改初始条件只能修改<code>Euler1D.cpp</code>文件，然后重新安装<code>pyEuler1D</code>扩展。程序内置的初始条件包含两道间断，其他位置<span class="math inline">\(\rho,u,p\)</span>均匀。</p>
<p>在<code>run.py</code>所在的目录下打开<code>cmd</code>，然后激活<code>Extentions</code>虚拟环境，再运行<code>run.py</code>，命令行中会出现下面的提示信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">__cinit__ is performed!</span><br><span class="line">Constructing...</span><br><span class="line">Initializing...</span><br><span class="line">Initilaztion completed...</span><br><span class="line">Opening the file...</span><br><span class="line">__dealloc__ is performed!</span><br><span class="line">Clean up Euler1D object!</span><br></pre></td></tr></table></figure>
<p>然后可以在目录下找到经过后处理的计算结果，它是一张<code>.png</code>图片。可从图片中看到，初始的两个间断分别发展成了RCR（稀疏波-接触间断-稀疏波）和RCS（稀疏波-接触间断-激波）形式。</p>
]]></content>
  </entry>
  <entry>
    <title>码！</title>
    <url>/Docs/Coding/index.html</url>
    <content><![CDATA[<p>我们并不研究计算机科学，我们也很少自己写大型求解器；但是掌握一定程度的计算机知识对我们的科研非常重要，因为我们很多时候要在一些现成的求解器上做二次开发、用简单的小程序验证idea。本页面将会介绍我们在科研过程中常用的计算机语言（<code>Fotran</code>,<code>C++</code>,<code>python</code>等）、环境配置（如何安装<code>WSL</code>等）。当然，我们不可能在本页面展示非常详细的教程（例如<code>C++</code>的各种语法），我们只会附上相关教程的链接。学习这些技术不应该成为科研的主要部分，而应该是你遇到相关任务时的有效参考。</p>
]]></content>
  </entry>
  <entry>
    <title>使用ICEM画网格</title>
    <url>/Docs/Software/ICEM.html</url>
    <content><![CDATA[<h2 id="视频教学">视频教学</h2>
<p>将由Aerolab网格专家录制，敬请期待！</p>
]]></content>
  </entry>
  <entry>
    <title>安装与使用ALDESIA</title>
    <url>/Docs/Software/ALDESIA.html</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p>ALDESIA是实验室自编的一款带伴随的二维线性对流扩散方程求解器。ALDESIA是使用<code>C++</code>编写的，它具有很强的面向对象特性，易于扩展，因而适合CFD和伴随算法的初学者阅读代码、修改代码。作者已经为ALDESIA添加了<code>Cython</code>文件和<code>setup.py</code>文件，因而ALDESIA可以被容易地被<code>python</code>打包，变成一个可以被<code>import</code>到<code>python</code>代码中的库。</p>
<h2 id="下载与安装windowswsl">下载与安装(Windows+WSL)</h2>
<div class="note warning"><ul>
<li><p>在下载和安装之前，确保你在WSL上的Ubuntu里安装了<code>g++</code>编译工具。输入下面的命令检查<code>g++</code>工具是否正确安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ --version</span><br></pre></td></tr></table></figure>
<p>如果没有返回版本信息，那么你需要安装<code>g++</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure>
<p>再次输入<code>g++ --version</code>查看是否返回版本信息，说返回，则说明安装成功。</p></li>
<li><p>安装之前，你还需要配置好<code>python</code>环境。关于<code>python</code>环境的配置，可以参考<a href="https://ostechnix.com/how-to-install-miniconda-in-linux/">How To Install Miniconda In Linux - OSTechNix</a>，也可以直接参考官方网站：<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html">Installing on Linux — conda 4.11.0.post48+b31c5ab10 documentation</a>。</p></li>
<li><p>你还需要安装<code>uzip</code>。首先检查是否安装了<code>unzip</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -v</span><br></pre></td></tr></table></figure>
<p>如果没有成功输出版本信息，就运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unzip</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -v</span><br></pre></td></tr></table></figure>
<p>如果输出版本信息，则表示<code>unzip</code>安装成功。</p></li>
</ul>
</div>
<div class="tabs" id="installation"><ul class="nav-tabs"><li class="tab active"><a href="#installation-1">Step 1</a></li><li class="tab"><a href="#installation-2">Step 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="installation-1"><p>打开WSL上的Ubuntu终端，跳转到你希望保存ALDESIA代码的目录（作为演示，我将把ALDESIA代码保存到<code>~/coding</code>目录下）。然后输入下面的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/chairmanmao256/ALDESIA/archive/r1.zip &amp;&amp; \</span><br><span class="line">unzip r1.zip &amp;&amp; \</span><br><span class="line">cd ALDESIA-r1</span><br></pre></td></tr></table></figure>
<p>现在，你下载并解压了ALDESIA的所有代码，并已经跳转到了这些代码所在的目录。</p></div><div class="tab-pane" id="installation-2"><p>在ALDESIA代码所在的目录中，运行下面的命令以编译所有文件，生成供链接用的<code>.o</code>文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./Allmake.sh</span><br></pre></td></tr></table></figure>
<p>然后跳转到<code>Aldesia</code>目录，将ALDESIA打包为<code>python</code>扩展：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Aldesia &amp;&amp; \</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></div></div></div>
<h2 id="使用方法">使用方法</h2>
<p>运行ALDESIA需要你准备两个文件：</p>
<div class="tabs" id="run"><ul class="nav-tabs"><li class="tab active"><a href="#run-1">input.ini</a></li><li class="tab"><a href="#run-2">run.py</a></li></ul><div class="tab-content"><div class="tab-pane active" id="run-1"><p>这个文件用来初始化ALDESIA对象，告诉ALDESIA想要它求解的问题的定义。</p></div><div class="tab-pane" id="run-2"><p>是你和ALDESIA的“交互界面”，用于生成ALDESIA对象，调用ALDESIA的方法以解决问题。</p></div></div></div>
<p>这两个文件的示例可以在示例目录<code>/ALDESIA-r1/Examples</code>下找到。示例目录下有两个示例，分别演示了ALDESIA求解线性对流扩散问题、线性对流扩散的伴随的功能。</p>
<h2 id="你可以做的开发">你可以做的开发</h2>
<p>目前，ALDESIA还不算完善：它只能求解正问题及其伴随，得到偏微分方程的解、目标函数的梯度；而且，ALDESIA使用十分原始的SOR方法求解线性方程组。因此，你还可以做：</p>
<ul>
<li>完成ALDESIA和优化求解器工具包<a href="https://github.com/mdolab/pyoptsparse">mdolab/pyoptsparse</a>的接口，使得我们可以利用ALDESIA提供的目标函数值、梯度来求解优化问题。</li>
<li>使用GMRES方法求解ALDESIA中的线性方程组。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>使用CFD++</title>
    <url>/Docs/Software/CFDpp.html</url>
    <content><![CDATA[<h2 id="cfd基本操作">CFD++基本操作</h2>
<p>本节教程为视频教程，由冯良韬录制。片中用到的网格可以用PointWise生成，也可以用ICEM生成。</p>
<div class="tabs" id="fengtutorial"><ul class="nav-tabs"><li class="tab active"><a href="#fengtutorial-1">Episode 1</a></li><li class="tab"><a href="#fengtutorial-2">Episode 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fengtutorial-1"><p><a href="https://www.bilibili.com/video/BV1dt4y1e7ep?spm_id_from=333.999.0.0">使用CFD++计算翼型周围流场</a>：介绍方程组的选择；初始条件和边界条件设置；输出设置；时间推进设置等。</p></div><div class="tab-pane" id="fengtutorial-2"><p><a href="https://www.bilibili.com/video/BV11v411r713?spm_id_from=333.999.0.0">导出翼型的升阻力数据</a>：介绍如何在CFD++中定义要输出的升力系数、阻力系数和力矩系数；如何在计算结束后读取这些系数。</p></div></div></div>
]]></content>
  </entry>
  <entry>
    <title>软件使用</title>
    <url>/Docs/Software/index.html</url>
    <content><![CDATA[<p>学会使用软件是在Aerolab做科研的重要一步。当然，它也是十分困难的一步。本页面包含Aerolab各个软件的专家级用户编辑的软件使用指南，覆盖的软件包含ICEM，CFD++，CFL3D等。希望专家级用户们的教学能增进你对这些软件的熟练程度！</p>
]]></content>
  </entry>
</search>
